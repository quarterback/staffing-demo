import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { Button } from "./ui/button";
import { Badge } from "./ui/badge";
import { Separator } from "./ui/separator";
import { Copy, Download, Users, Clock, DollarSign } from "lucide-react";
import { toast } from "sonner@2.0.3";

interface ParticipantRole {
  id: string;
  title: string;
  hourlyRate: number;
  count: number;
}

const initialRoles: ParticipantRole[] = [
  { id: 'ic', title: 'IC/Practitioner', hourlyRate: 58, count: 0 },
  { id: 'manager', title: 'Manager/Lead', hourlyRate: 72, count: 0 },
  { id: 'director', title: 'Director', hourlyRate: 87, count: 0 },
  { id: 'vp', title: 'VP/Exec', hourlyRate: 116, count: 0 }
];

const durationOptions = [
  { value: '15', label: '15 minutes', hours: 0.25 },
  { value: '30', label: '30 minutes', hours: 0.5 },
  { value: '45', label: '45 minutes', hours: 0.75 },
  { value: '60', label: '1 hour', hours: 1 },
  { value: '120', label: '2 hours', hours: 2 }
];

export function MeetingCostEstimator() {
  const [duration, setDuration] = useState('');
  const [roles, setRoles] = useState<ParticipantRole[]>(initialRoles);

  const selectedDuration = durationOptions.find(d => d.value === duration);
  const durationHours = selectedDuration?.hours || 0;

  const totalCost = roles.reduce((total, role) => {
    return total + (role.count * role.hourlyRate * durationHours);
  }, 0);

  const totalParticipants = roles.reduce((total, role) => total + role.count, 0);

  const updateRoleCount = (roleId: string, increment: boolean) => {
    setRoles(prev => prev.map(role => 
      role.id === roleId 
        ? { ...role, count: Math.max(0, role.count + (increment ? 1 : -1)) }
        : role
    ));
  };

  const resetCalculator = () => {
    setDuration('');
    setRoles(initialRoles);
  };

  const copyToClipboard = () => {
    const report = generateReport();
    navigator.clipboard.writeText(report);
    toast.success("Meeting cost details copied to clipboard");
  };

  const exportToReport = () => {
    const report = generateReport();
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `meeting-cost-estimate-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast.success("Meeting cost report exported successfully");
  };

  const generateReport = () => {
    const activeRoles = roles.filter(role => role.count > 0);
    const breakdown = activeRoles.map(role => 
      `${role.title}: ${role.count} × $${role.hourlyRate}/hr × ${durationHours}h = $${(role.count * role.hourlyRate * durationHours).toFixed(2)}`
    ).join('\n');

    return `MEETING COST ESTIMATE
Generated: ${new Date().toLocaleString()}

Duration: ${selectedDuration?.label || 'Not specified'}
Total Participants: ${totalParticipants}
Total Cost: $${totalCost.toFixed(2)}

BREAKDOWN:
${breakdown}

---
Generated by Silta - AI-Powered Staffing Tool`;
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-semibold text-gray-900">Meeting Cost Estimator</h2>
          <p className="text-gray-600 mt-1">Calculate the true cost of your meetings based on participant roles and duration.</p>
        </div>
        <Button variant="outline" onClick={resetCalculator} className="text-gray-600">
          Clear All
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Configuration Panel */}
        <div className="lg:col-span-2 space-y-6">
          {/* Duration Selection */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Clock className="h-5 w-5 text-blue-600" />
                Meeting Duration
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Select value={duration} onValueChange={setDuration}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select meeting duration" />
                </SelectTrigger>
                <SelectContent>
                  {durationOptions.map(option => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </CardContent>
          </Card>

          {/* Participant Selection */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Users className="h-5 w-5 text-teal-600" />
                Meeting Participants
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {roles.map(role => (
                <div key={role.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div className="flex-1">
                    <div className="flex items-center gap-3">
                      <span className="font-medium text-gray-900">{role.title}</span>
                      <Badge variant="secondary" className="bg-green-100 text-green-800">
                        ${role.hourlyRate}/hr
                      </Badge>
                    </div>
                  </div>
                  <div className="flex items-center gap-3">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => updateRoleCount(role.id, false)}
                      disabled={role.count === 0}
                      className="h-8 w-8 p-0"
                    >
                      -
                    </Button>
                    <span className="min-w-[2rem] text-center font-medium">
                      {role.count}
                    </span>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => updateRoleCount(role.id, true)}
                      className="h-8 w-8 p-0"
                    >
                      +
                    </Button>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </div>

        {/* Cost Calculation Panel */}
        <div className="lg:col-span-1">
          <Card className="sticky top-6">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <DollarSign className="h-5 w-5 text-green-600" />
                Cost Summary
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Cost Display */}
              <div className="text-center p-6 bg-gradient-to-br from-blue-50 to-teal-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-2">Total Meeting Cost</p>
                <p className="text-3xl font-bold text-gray-900">
                  ${totalCost.toFixed(2)}
                </p>
              </div>

              {/* Meeting Stats */}
              <div className="space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">Duration:</span>
                  <span className="font-medium">
                    {selectedDuration?.label || 'Not selected'}
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">Participants:</span>
                  <span className="font-medium">{totalParticipants}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">Cost per minute:</span>
                  <span className="font-medium">
                    ${duration ? (totalCost / parseInt(duration)).toFixed(2) : '0.00'}
                  </span>
                </div>
              </div>

              <Separator />

              {/* Breakdown */}
              {roles.filter(role => role.count > 0).length > 0 && (
                <div className="space-y-2">
                  <p className="text-sm font-medium text-gray-900">Cost Breakdown:</p>
                  {roles
                    .filter(role => role.count > 0)
                    .map(role => (
                      <div key={role.id} className="flex justify-between text-xs">
                        <span className="text-gray-600">
                          {role.count}× {role.title}
                        </span>
                        <span className="font-medium">
                          ${(role.count * role.hourlyRate * durationHours).toFixed(2)}
                        </span>
                      </div>
                    ))}
                </div>
              )}

              <Separator />

              {/* Actions */}
              <div className="space-y-2">
                <Button 
                  onClick={exportToReport}
                  disabled={totalCost === 0}
                  className="w-full bg-blue-600 hover:bg-blue-700"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Export to Report
                </Button>
                <Button 
                  variant="outline" 
                  onClick={copyToClipboard}
                  disabled={totalCost === 0}
                  className="w-full"
                >
                  <Copy className="h-4 w-4 mr-2" />
                  Copy to Clipboard
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}